// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package knock

import (
	"context"
	"net/http"
	"net/url"
	"reflect"
	"time"

	"github.com/stainless-sdks/knock-go/internal/apijson"
	"github.com/stainless-sdks/knock-go/internal/apiquery"
	"github.com/stainless-sdks/knock-go/internal/param"
	"github.com/stainless-sdks/knock-go/internal/requestconfig"
	"github.com/stainless-sdks/knock-go/option"
	"github.com/stainless-sdks/knock-go/shared"
	"github.com/tidwall/gjson"
)

// MessageBatchService contains methods and other services that help with
// interacting with the knock API.
//
// Note, unlike clients, this service does not read variables from the environment
// automatically. You should not instantiate this service directly, and instead use
// the [NewMessageBatchService] method instead.
type MessageBatchService struct {
	Options []option.RequestOption
}

// NewMessageBatchService generates a new service that applies the given options to
// each request. These options are applied after the parent client's options (if
// there is one), and before any request-specific options.
func NewMessageBatchService(opts ...option.RequestOption) (r *MessageBatchService) {
	r = &MessageBatchService{}
	r.Options = opts
	return
}

// Mark messages as archived
func (r *MessageBatchService) Archive(ctx context.Context, body MessageBatchArchiveParams, opts ...option.RequestOption) (res *[]MessageBatchArchiveResponse, err error) {
	opts = append(r.Options[:], opts...)
	path := "v1/messages/batch/archived"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, body, &res, opts...)
	return
}

// Get the contents of multiple messages in a single request.
func (r *MessageBatchService) GetContent(ctx context.Context, query MessageBatchGetContentParams, opts ...option.RequestOption) (res *[]MessageBatchGetContentResponse, err error) {
	opts = append(r.Options[:], opts...)
	path := "v1/messages/batch/content"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, query, &res, opts...)
	return
}

// Mark messages as interacted
func (r *MessageBatchService) MarkAsInteracted(ctx context.Context, body MessageBatchMarkAsInteractedParams, opts ...option.RequestOption) (res *[]MessageBatchMarkAsInteractedResponse, err error) {
	opts = append(r.Options[:], opts...)
	path := "v1/messages/batch/interacted"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, body, &res, opts...)
	return
}

// Mark messages as read
func (r *MessageBatchService) MarkAsRead(ctx context.Context, body MessageBatchMarkAsReadParams, opts ...option.RequestOption) (res *[]MessageBatchMarkAsReadResponse, err error) {
	opts = append(r.Options[:], opts...)
	path := "v1/messages/batch/read"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, body, &res, opts...)
	return
}

// Mark messages as seen
func (r *MessageBatchService) MarkAsSeen(ctx context.Context, body MessageBatchMarkAsSeenParams, opts ...option.RequestOption) (res *[]MessageBatchMarkAsSeenResponse, err error) {
	opts = append(r.Options[:], opts...)
	path := "v1/messages/batch/seen"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, body, &res, opts...)
	return
}

// Mark messages as unread
func (r *MessageBatchService) MarkAsUnread(ctx context.Context, body MessageBatchMarkAsUnreadParams, opts ...option.RequestOption) (res *[]MessageBatchMarkAsUnreadResponse, err error) {
	opts = append(r.Options[:], opts...)
	path := "v1/messages/batch/unread"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, body, &res, opts...)
	return
}

// Mark messages as unseen
func (r *MessageBatchService) MarkAsUnseen(ctx context.Context, body MessageBatchMarkAsUnseenParams, opts ...option.RequestOption) (res *[]MessageBatchMarkAsUnseenResponse, err error) {
	opts = append(r.Options[:], opts...)
	path := "v1/messages/batch/unseen"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, body, &res, opts...)
	return
}

// Mark messages as unarchived
func (r *MessageBatchService) Unarchive(ctx context.Context, body MessageBatchUnarchiveParams, opts ...option.RequestOption) (res *[]MessageBatchUnarchiveResponse, err error) {
	opts = append(r.Options[:], opts...)
	path := "v1/messages/batch/unarchived"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, body, &res, opts...)
	return
}

// Represents a single message that was generated by a workflow for a given
// channel.
type MessageBatchArchiveResponse struct {
	// The message ID
	ID       string `json:"id"`
	Typename string `json:"__typename"`
	// A list of actor representations associated with the message (up to 10)
	Actors []MessageBatchArchiveResponseActorsUnion `json:"actors"`
	// Timestamp when message was archived
	ArchivedAt time.Time `json:"archived_at,nullable" format:"date-time"`
	// Channel ID associated with the message
	ChannelID string `json:"channel_id" format:"uuid"`
	// Timestamp when message was clicked
	ClickedAt time.Time `json:"clicked_at,nullable" format:"date-time"`
	// Additional message data
	Data map[string]interface{} `json:"data,nullable"`
	// List of engagement statuses
	EngagementStatuses []MessageBatchArchiveResponseEngagementStatus `json:"engagement_statuses"`
	// Timestamp of creation
	InsertedAt time.Time `json:"inserted_at" format:"date-time"`
	// Timestamp when message was interacted with
	InteractedAt time.Time `json:"interacted_at,nullable" format:"date-time"`
	// Timestamp when a link in the message was clicked
	LinkClickedAt time.Time `json:"link_clicked_at,nullable" format:"date-time"`
	// Message metadata
	Metadata map[string]interface{} `json:"metadata,nullable"`
	// Timestamp when message was read
	ReadAt time.Time `json:"read_at,nullable" format:"date-time"`
	// A reference to a recipient, either a user identifier (string) or an object
	// reference (id, collection).
	Recipient MessageBatchArchiveResponseRecipientUnion `json:"recipient"`
	// Timestamp when message was scheduled for
	ScheduledAt time.Time `json:"scheduled_at,nullable" format:"date-time"`
	// Timestamp when message was seen
	SeenAt time.Time `json:"seen_at,nullable" format:"date-time"`
	// Source information
	Source MessageBatchArchiveResponseSource `json:"source"`
	// Message delivery status
	Status MessageBatchArchiveResponseStatus `json:"status"`
	// Tenant ID that the message belongs to
	Tenant string `json:"tenant,nullable"`
	// Timestamp of last update
	UpdatedAt time.Time `json:"updated_at" format:"date-time"`
	// Workflow key used to create the message
	//
	// Deprecated: deprecated
	Workflow string                          `json:"workflow,nullable"`
	JSON     messageBatchArchiveResponseJSON `json:"-"`
}

// messageBatchArchiveResponseJSON contains the JSON metadata for the struct
// [MessageBatchArchiveResponse]
type messageBatchArchiveResponseJSON struct {
	ID                 apijson.Field
	Typename           apijson.Field
	Actors             apijson.Field
	ArchivedAt         apijson.Field
	ChannelID          apijson.Field
	ClickedAt          apijson.Field
	Data               apijson.Field
	EngagementStatuses apijson.Field
	InsertedAt         apijson.Field
	InteractedAt       apijson.Field
	LinkClickedAt      apijson.Field
	Metadata           apijson.Field
	ReadAt             apijson.Field
	Recipient          apijson.Field
	ScheduledAt        apijson.Field
	SeenAt             apijson.Field
	Source             apijson.Field
	Status             apijson.Field
	Tenant             apijson.Field
	UpdatedAt          apijson.Field
	Workflow           apijson.Field
	raw                string
	ExtraFields        map[string]apijson.Field
}

func (r *MessageBatchArchiveResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchArchiveResponseJSON) RawJSON() string {
	return r.raw
}

// A reference to a recipient, either a user identifier (string) or an object
// reference (id, collection).
//
// Union satisfied by [shared.UnionString] or
// [MessageBatchArchiveResponseActorsObjectReference].
type MessageBatchArchiveResponseActorsUnion interface {
	ImplementsMessageBatchArchiveResponseActorsUnion()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*MessageBatchArchiveResponseActorsUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.String,
			Type:       reflect.TypeOf(shared.UnionString("")),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(MessageBatchArchiveResponseActorsObjectReference{}),
		},
	)
}

// An object reference to a recipient
type MessageBatchArchiveResponseActorsObjectReference struct {
	// An object identifier
	ID string `json:"id,required"`
	// The collection the object belongs to
	Collection string                                               `json:"collection,required"`
	JSON       messageBatchArchiveResponseActorsObjectReferenceJSON `json:"-"`
}

// messageBatchArchiveResponseActorsObjectReferenceJSON contains the JSON metadata
// for the struct [MessageBatchArchiveResponseActorsObjectReference]
type messageBatchArchiveResponseActorsObjectReferenceJSON struct {
	ID          apijson.Field
	Collection  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *MessageBatchArchiveResponseActorsObjectReference) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchArchiveResponseActorsObjectReferenceJSON) RawJSON() string {
	return r.raw
}

func (r MessageBatchArchiveResponseActorsObjectReference) ImplementsMessageBatchArchiveResponseActorsUnion() {
}

type MessageBatchArchiveResponseEngagementStatus string

const (
	MessageBatchArchiveResponseEngagementStatusSeen        MessageBatchArchiveResponseEngagementStatus = "seen"
	MessageBatchArchiveResponseEngagementStatusRead        MessageBatchArchiveResponseEngagementStatus = "read"
	MessageBatchArchiveResponseEngagementStatusInteracted  MessageBatchArchiveResponseEngagementStatus = "interacted"
	MessageBatchArchiveResponseEngagementStatusLinkClicked MessageBatchArchiveResponseEngagementStatus = "link_clicked"
	MessageBatchArchiveResponseEngagementStatusArchived    MessageBatchArchiveResponseEngagementStatus = "archived"
)

func (r MessageBatchArchiveResponseEngagementStatus) IsKnown() bool {
	switch r {
	case MessageBatchArchiveResponseEngagementStatusSeen, MessageBatchArchiveResponseEngagementStatusRead, MessageBatchArchiveResponseEngagementStatusInteracted, MessageBatchArchiveResponseEngagementStatusLinkClicked, MessageBatchArchiveResponseEngagementStatusArchived:
		return true
	}
	return false
}

// A reference to a recipient, either a user identifier (string) or an object
// reference (id, collection).
//
// Union satisfied by [shared.UnionString] or
// [MessageBatchArchiveResponseRecipientObjectReference].
type MessageBatchArchiveResponseRecipientUnion interface {
	ImplementsMessageBatchArchiveResponseRecipientUnion()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*MessageBatchArchiveResponseRecipientUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.String,
			Type:       reflect.TypeOf(shared.UnionString("")),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(MessageBatchArchiveResponseRecipientObjectReference{}),
		},
	)
}

// An object reference to a recipient
type MessageBatchArchiveResponseRecipientObjectReference struct {
	// An object identifier
	ID string `json:"id,required"`
	// The collection the object belongs to
	Collection string                                                  `json:"collection,required"`
	JSON       messageBatchArchiveResponseRecipientObjectReferenceJSON `json:"-"`
}

// messageBatchArchiveResponseRecipientObjectReferenceJSON contains the JSON
// metadata for the struct [MessageBatchArchiveResponseRecipientObjectReference]
type messageBatchArchiveResponseRecipientObjectReferenceJSON struct {
	ID          apijson.Field
	Collection  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *MessageBatchArchiveResponseRecipientObjectReference) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchArchiveResponseRecipientObjectReferenceJSON) RawJSON() string {
	return r.raw
}

func (r MessageBatchArchiveResponseRecipientObjectReference) ImplementsMessageBatchArchiveResponseRecipientUnion() {
}

// Source information
type MessageBatchArchiveResponseSource struct {
	Typename string `json:"__typename,required"`
	// The workflow categories
	Categories []string `json:"categories,required"`
	// The workflow key
	Key string `json:"key,required"`
	// The source version ID
	VersionID string                                `json:"version_id,required" format:"uuid"`
	JSON      messageBatchArchiveResponseSourceJSON `json:"-"`
}

// messageBatchArchiveResponseSourceJSON contains the JSON metadata for the struct
// [MessageBatchArchiveResponseSource]
type messageBatchArchiveResponseSourceJSON struct {
	Typename    apijson.Field
	Categories  apijson.Field
	Key         apijson.Field
	VersionID   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *MessageBatchArchiveResponseSource) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchArchiveResponseSourceJSON) RawJSON() string {
	return r.raw
}

// Message delivery status
type MessageBatchArchiveResponseStatus string

const (
	MessageBatchArchiveResponseStatusQueued            MessageBatchArchiveResponseStatus = "queued"
	MessageBatchArchiveResponseStatusSent              MessageBatchArchiveResponseStatus = "sent"
	MessageBatchArchiveResponseStatusDelivered         MessageBatchArchiveResponseStatus = "delivered"
	MessageBatchArchiveResponseStatusDeliveryAttempted MessageBatchArchiveResponseStatus = "delivery_attempted"
	MessageBatchArchiveResponseStatusUndelivered       MessageBatchArchiveResponseStatus = "undelivered"
	MessageBatchArchiveResponseStatusNotSent           MessageBatchArchiveResponseStatus = "not_sent"
	MessageBatchArchiveResponseStatusBounced           MessageBatchArchiveResponseStatus = "bounced"
)

func (r MessageBatchArchiveResponseStatus) IsKnown() bool {
	switch r {
	case MessageBatchArchiveResponseStatusQueued, MessageBatchArchiveResponseStatusSent, MessageBatchArchiveResponseStatusDelivered, MessageBatchArchiveResponseStatusDeliveryAttempted, MessageBatchArchiveResponseStatusUndelivered, MessageBatchArchiveResponseStatusNotSent, MessageBatchArchiveResponseStatusBounced:
		return true
	}
	return false
}

// The contents of a message
type MessageBatchGetContentResponse struct {
	Typename string `json:"__typename,required"`
	// The contents of an email message
	Data       MessageBatchGetContentResponseData `json:"data,required"`
	InsertedAt time.Time                          `json:"inserted_at,required" format:"date-time"`
	MessageID  string                             `json:"message_id,required"`
	JSON       messageBatchGetContentResponseJSON `json:"-"`
}

// messageBatchGetContentResponseJSON contains the JSON metadata for the struct
// [MessageBatchGetContentResponse]
type messageBatchGetContentResponseJSON struct {
	Typename    apijson.Field
	Data        apijson.Field
	InsertedAt  apijson.Field
	MessageID   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *MessageBatchGetContentResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchGetContentResponseJSON) RawJSON() string {
	return r.raw
}

// The contents of an email message
type MessageBatchGetContentResponseData struct {
	Typename string `json:"__typename,required"`
	Token    string `json:"token"`
	Bcc      string `json:"bcc,nullable"`
	// This field can have the runtime type of
	// [[]MessageBatchGetContentResponseDataMessageInAppFeedContentBlock].
	Blocks interface{} `json:"blocks"`
	Body   string      `json:"body"`
	Cc     string      `json:"cc,nullable"`
	// This field can have the runtime type of [map[string]interface{}].
	Connection interface{} `json:"connection"`
	// This field can have the runtime type of [map[string]interface{}].
	Data     interface{} `json:"data"`
	From     string      `json:"from"`
	HTMLBody string      `json:"html_body"`
	// This field can have the runtime type of [map[string]interface{}].
	Metadata    interface{} `json:"metadata"`
	ReplyTo     string      `json:"reply_to,nullable"`
	SubjectLine string      `json:"subject_line"`
	// This field can have the runtime type of
	// [MessageBatchGetContentResponseDataMessageChatContentTemplate].
	Template interface{}                            `json:"template"`
	TextBody string                                 `json:"text_body"`
	Title    string                                 `json:"title"`
	To       string                                 `json:"to"`
	JSON     messageBatchGetContentResponseDataJSON `json:"-"`
	union    MessageBatchGetContentResponseDataUnion
}

// messageBatchGetContentResponseDataJSON contains the JSON metadata for the struct
// [MessageBatchGetContentResponseData]
type messageBatchGetContentResponseDataJSON struct {
	Typename    apijson.Field
	Token       apijson.Field
	Bcc         apijson.Field
	Blocks      apijson.Field
	Body        apijson.Field
	Cc          apijson.Field
	Connection  apijson.Field
	Data        apijson.Field
	From        apijson.Field
	HTMLBody    apijson.Field
	Metadata    apijson.Field
	ReplyTo     apijson.Field
	SubjectLine apijson.Field
	Template    apijson.Field
	TextBody    apijson.Field
	Title       apijson.Field
	To          apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r messageBatchGetContentResponseDataJSON) RawJSON() string {
	return r.raw
}

func (r *MessageBatchGetContentResponseData) UnmarshalJSON(data []byte) (err error) {
	*r = MessageBatchGetContentResponseData{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a [MessageBatchGetContentResponseDataUnion] interface which you
// can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [MessageBatchGetContentResponseDataMessageEmailContent],
// [MessageBatchGetContentResponseDataMessageSMSContent],
// [MessageBatchGetContentResponseDataMessagePushContent],
// [MessageBatchGetContentResponseDataMessageChatContent],
// [MessageBatchGetContentResponseDataMessageInAppFeedContent].
func (r MessageBatchGetContentResponseData) AsUnion() MessageBatchGetContentResponseDataUnion {
	return r.union
}

// The contents of an email message
//
// Union satisfied by [MessageBatchGetContentResponseDataMessageEmailContent],
// [MessageBatchGetContentResponseDataMessageSMSContent],
// [MessageBatchGetContentResponseDataMessagePushContent],
// [MessageBatchGetContentResponseDataMessageChatContent] or
// [MessageBatchGetContentResponseDataMessageInAppFeedContent].
type MessageBatchGetContentResponseDataUnion interface {
	implementsMessageBatchGetContentResponseData()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*MessageBatchGetContentResponseDataUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(MessageBatchGetContentResponseDataMessageEmailContent{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(MessageBatchGetContentResponseDataMessageSMSContent{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(MessageBatchGetContentResponseDataMessagePushContent{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(MessageBatchGetContentResponseDataMessageChatContent{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(MessageBatchGetContentResponseDataMessageInAppFeedContent{}),
		},
	)
}

// The contents of an email message
type MessageBatchGetContentResponseDataMessageEmailContent struct {
	Typename    string                                                    `json:"__typename,required"`
	From        string                                                    `json:"from,required"`
	HTMLBody    string                                                    `json:"html_body,required"`
	SubjectLine string                                                    `json:"subject_line,required"`
	TextBody    string                                                    `json:"text_body,required"`
	To          string                                                    `json:"to,required"`
	Bcc         string                                                    `json:"bcc,nullable"`
	Cc          string                                                    `json:"cc,nullable"`
	ReplyTo     string                                                    `json:"reply_to,nullable"`
	JSON        messageBatchGetContentResponseDataMessageEmailContentJSON `json:"-"`
}

// messageBatchGetContentResponseDataMessageEmailContentJSON contains the JSON
// metadata for the struct [MessageBatchGetContentResponseDataMessageEmailContent]
type messageBatchGetContentResponseDataMessageEmailContentJSON struct {
	Typename    apijson.Field
	From        apijson.Field
	HTMLBody    apijson.Field
	SubjectLine apijson.Field
	TextBody    apijson.Field
	To          apijson.Field
	Bcc         apijson.Field
	Cc          apijson.Field
	ReplyTo     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *MessageBatchGetContentResponseDataMessageEmailContent) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchGetContentResponseDataMessageEmailContentJSON) RawJSON() string {
	return r.raw
}

func (r MessageBatchGetContentResponseDataMessageEmailContent) implementsMessageBatchGetContentResponseData() {
}

// The contents of an SMS message
type MessageBatchGetContentResponseDataMessageSMSContent struct {
	Typename string                                                  `json:"__typename,required"`
	Body     string                                                  `json:"body,required"`
	To       string                                                  `json:"to,required"`
	JSON     messageBatchGetContentResponseDataMessageSMSContentJSON `json:"-"`
}

// messageBatchGetContentResponseDataMessageSMSContentJSON contains the JSON
// metadata for the struct [MessageBatchGetContentResponseDataMessageSMSContent]
type messageBatchGetContentResponseDataMessageSMSContentJSON struct {
	Typename    apijson.Field
	Body        apijson.Field
	To          apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *MessageBatchGetContentResponseDataMessageSMSContent) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchGetContentResponseDataMessageSMSContentJSON) RawJSON() string {
	return r.raw
}

func (r MessageBatchGetContentResponseDataMessageSMSContent) implementsMessageBatchGetContentResponseData() {
}

// The contents of a push message
type MessageBatchGetContentResponseDataMessagePushContent struct {
	Token    string                                                   `json:"token,required"`
	Typename string                                                   `json:"__typename,required"`
	Body     string                                                   `json:"body,required"`
	Title    string                                                   `json:"title,required"`
	Data     map[string]interface{}                                   `json:"data,nullable"`
	JSON     messageBatchGetContentResponseDataMessagePushContentJSON `json:"-"`
}

// messageBatchGetContentResponseDataMessagePushContentJSON contains the JSON
// metadata for the struct [MessageBatchGetContentResponseDataMessagePushContent]
type messageBatchGetContentResponseDataMessagePushContentJSON struct {
	Token       apijson.Field
	Typename    apijson.Field
	Body        apijson.Field
	Title       apijson.Field
	Data        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *MessageBatchGetContentResponseDataMessagePushContent) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchGetContentResponseDataMessagePushContentJSON) RawJSON() string {
	return r.raw
}

func (r MessageBatchGetContentResponseDataMessagePushContent) implementsMessageBatchGetContentResponseData() {
}

// The contents of a chat message
type MessageBatchGetContentResponseDataMessageChatContent struct {
	Typename string `json:"__typename,required"`
	// The channel data connection from the recipient to the underlying provider
	Connection map[string]interface{}                                       `json:"connection,required"`
	Template   MessageBatchGetContentResponseDataMessageChatContentTemplate `json:"template,required"`
	Metadata   map[string]interface{}                                       `json:"metadata,nullable"`
	JSON       messageBatchGetContentResponseDataMessageChatContentJSON     `json:"-"`
}

// messageBatchGetContentResponseDataMessageChatContentJSON contains the JSON
// metadata for the struct [MessageBatchGetContentResponseDataMessageChatContent]
type messageBatchGetContentResponseDataMessageChatContentJSON struct {
	Typename    apijson.Field
	Connection  apijson.Field
	Template    apijson.Field
	Metadata    apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *MessageBatchGetContentResponseDataMessageChatContent) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchGetContentResponseDataMessageChatContentJSON) RawJSON() string {
	return r.raw
}

func (r MessageBatchGetContentResponseDataMessageChatContent) implementsMessageBatchGetContentResponseData() {
}

type MessageBatchGetContentResponseDataMessageChatContentTemplate struct {
	// The structured blocks of the message
	Blocks []MessageBatchGetContentResponseDataMessageChatContentTemplateBlock `json:"blocks,nullable"`
	// The JSON content of the message
	JsonContent map[string]interface{}                                           `json:"json_content,nullable"`
	Summary     string                                                           `json:"summary,nullable"`
	JSON        messageBatchGetContentResponseDataMessageChatContentTemplateJSON `json:"-"`
}

// messageBatchGetContentResponseDataMessageChatContentTemplateJSON contains the
// JSON metadata for the struct
// [MessageBatchGetContentResponseDataMessageChatContentTemplate]
type messageBatchGetContentResponseDataMessageChatContentTemplateJSON struct {
	Blocks      apijson.Field
	JsonContent apijson.Field
	Summary     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *MessageBatchGetContentResponseDataMessageChatContentTemplate) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchGetContentResponseDataMessageChatContentTemplateJSON) RawJSON() string {
	return r.raw
}

// A block in a chat message
type MessageBatchGetContentResponseDataMessageChatContentTemplateBlock struct {
	Content string                                                                 `json:"content,required"`
	Name    string                                                                 `json:"name,required"`
	Type    MessageBatchGetContentResponseDataMessageChatContentTemplateBlocksType `json:"type,required"`
	JSON    messageBatchGetContentResponseDataMessageChatContentTemplateBlockJSON  `json:"-"`
}

// messageBatchGetContentResponseDataMessageChatContentTemplateBlockJSON contains
// the JSON metadata for the struct
// [MessageBatchGetContentResponseDataMessageChatContentTemplateBlock]
type messageBatchGetContentResponseDataMessageChatContentTemplateBlockJSON struct {
	Content     apijson.Field
	Name        apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *MessageBatchGetContentResponseDataMessageChatContentTemplateBlock) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchGetContentResponseDataMessageChatContentTemplateBlockJSON) RawJSON() string {
	return r.raw
}

type MessageBatchGetContentResponseDataMessageChatContentTemplateBlocksType string

const (
	MessageBatchGetContentResponseDataMessageChatContentTemplateBlocksTypeText     MessageBatchGetContentResponseDataMessageChatContentTemplateBlocksType = "text"
	MessageBatchGetContentResponseDataMessageChatContentTemplateBlocksTypeMarkdown MessageBatchGetContentResponseDataMessageChatContentTemplateBlocksType = "markdown"
)

func (r MessageBatchGetContentResponseDataMessageChatContentTemplateBlocksType) IsKnown() bool {
	switch r {
	case MessageBatchGetContentResponseDataMessageChatContentTemplateBlocksTypeText, MessageBatchGetContentResponseDataMessageChatContentTemplateBlocksTypeMarkdown:
		return true
	}
	return false
}

// The contents of a message in an app feed
type MessageBatchGetContentResponseDataMessageInAppFeedContent struct {
	Typename string `json:"__typename,required"`
	// The blocks of the message
	Blocks []MessageBatchGetContentResponseDataMessageInAppFeedContentBlock `json:"blocks,required"`
	JSON   messageBatchGetContentResponseDataMessageInAppFeedContentJSON    `json:"-"`
}

// messageBatchGetContentResponseDataMessageInAppFeedContentJSON contains the JSON
// metadata for the struct
// [MessageBatchGetContentResponseDataMessageInAppFeedContent]
type messageBatchGetContentResponseDataMessageInAppFeedContentJSON struct {
	Typename    apijson.Field
	Blocks      apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *MessageBatchGetContentResponseDataMessageInAppFeedContent) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchGetContentResponseDataMessageInAppFeedContentJSON) RawJSON() string {
	return r.raw
}

func (r MessageBatchGetContentResponseDataMessageInAppFeedContent) implementsMessageBatchGetContentResponseData() {
}

// A content (text or markdown) block in a message in an app feed
type MessageBatchGetContentResponseDataMessageInAppFeedContentBlock struct {
	Name string                                                              `json:"name,required"`
	Type MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksType `json:"type,required"`
	// This field can have the runtime type of
	// [[]MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedButtonSetBlockButton].
	Buttons  interface{}                                                        `json:"buttons"`
	Content  string                                                             `json:"content"`
	Rendered string                                                             `json:"rendered"`
	JSON     messageBatchGetContentResponseDataMessageInAppFeedContentBlockJSON `json:"-"`
	union    MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksUnion
}

// messageBatchGetContentResponseDataMessageInAppFeedContentBlockJSON contains the
// JSON metadata for the struct
// [MessageBatchGetContentResponseDataMessageInAppFeedContentBlock]
type messageBatchGetContentResponseDataMessageInAppFeedContentBlockJSON struct {
	Name        apijson.Field
	Type        apijson.Field
	Buttons     apijson.Field
	Content     apijson.Field
	Rendered    apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r messageBatchGetContentResponseDataMessageInAppFeedContentBlockJSON) RawJSON() string {
	return r.raw
}

func (r *MessageBatchGetContentResponseDataMessageInAppFeedContentBlock) UnmarshalJSON(data []byte) (err error) {
	*r = MessageBatchGetContentResponseDataMessageInAppFeedContentBlock{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a
// [MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksUnion] interface
// which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedContentBlock],
// [MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedButtonSetBlock].
func (r MessageBatchGetContentResponseDataMessageInAppFeedContentBlock) AsUnion() MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksUnion {
	return r.union
}

// A content (text or markdown) block in a message in an app feed
//
// Union satisfied by
// [MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedContentBlock]
// or
// [MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedButtonSetBlock].
type MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksUnion interface {
	implementsMessageBatchGetContentResponseDataMessageInAppFeedContentBlock()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedContentBlock{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedButtonSetBlock{}),
		},
	)
}

// A content (text or markdown) block in a message in an app feed
type MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedContentBlock struct {
	Content  string                                                                                          `json:"content,required"`
	Name     string                                                                                          `json:"name,required"`
	Rendered string                                                                                          `json:"rendered,required"`
	Type     MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedContentBlockType `json:"type,required"`
	JSON     messageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedContentBlockJSON `json:"-"`
}

// messageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedContentBlockJSON
// contains the JSON metadata for the struct
// [MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedContentBlock]
type messageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedContentBlockJSON struct {
	Content     apijson.Field
	Name        apijson.Field
	Rendered    apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedContentBlock) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedContentBlockJSON) RawJSON() string {
	return r.raw
}

func (r MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedContentBlock) implementsMessageBatchGetContentResponseDataMessageInAppFeedContentBlock() {
}

type MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedContentBlockType string

const (
	MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedContentBlockTypeMarkdown MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedContentBlockType = "markdown"
	MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedContentBlockTypeText     MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedContentBlockType = "text"
)

func (r MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedContentBlockType) IsKnown() bool {
	switch r {
	case MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedContentBlockTypeMarkdown, MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedContentBlockTypeText:
		return true
	}
	return false
}

// A set of buttons in a message in an app feed
type MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedButtonSetBlock struct {
	Buttons []MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedButtonSetBlockButton `json:"buttons,required"`
	Name    string                                                                                                `json:"name,required"`
	Type    MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedButtonSetBlockType     `json:"type,required"`
	JSON    messageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedButtonSetBlockJSON     `json:"-"`
}

// messageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedButtonSetBlockJSON
// contains the JSON metadata for the struct
// [MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedButtonSetBlock]
type messageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedButtonSetBlockJSON struct {
	Buttons     apijson.Field
	Name        apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedButtonSetBlock) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedButtonSetBlockJSON) RawJSON() string {
	return r.raw
}

func (r MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedButtonSetBlock) implementsMessageBatchGetContentResponseDataMessageInAppFeedContentBlock() {
}

// A button in a set of buttons
type MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedButtonSetBlockButton struct {
	Action string                                                                                                  `json:"action,required"`
	Label  string                                                                                                  `json:"label,required"`
	Name   string                                                                                                  `json:"name,required"`
	JSON   messageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedButtonSetBlockButtonJSON `json:"-"`
}

// messageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedButtonSetBlockButtonJSON
// contains the JSON metadata for the struct
// [MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedButtonSetBlockButton]
type messageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedButtonSetBlockButtonJSON struct {
	Action      apijson.Field
	Label       apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedButtonSetBlockButton) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedButtonSetBlockButtonJSON) RawJSON() string {
	return r.raw
}

type MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedButtonSetBlockType string

const (
	MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedButtonSetBlockTypeButtonSet MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedButtonSetBlockType = "button_set"
)

func (r MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedButtonSetBlockType) IsKnown() bool {
	switch r {
	case MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksMessageInAppFeedButtonSetBlockTypeButtonSet:
		return true
	}
	return false
}

type MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksType string

const (
	MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksTypeMarkdown  MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksType = "markdown"
	MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksTypeText      MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksType = "text"
	MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksTypeButtonSet MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksType = "button_set"
)

func (r MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksType) IsKnown() bool {
	switch r {
	case MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksTypeMarkdown, MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksTypeText, MessageBatchGetContentResponseDataMessageInAppFeedContentBlocksTypeButtonSet:
		return true
	}
	return false
}

// Represents a single message that was generated by a workflow for a given
// channel.
type MessageBatchMarkAsInteractedResponse struct {
	// The message ID
	ID       string `json:"id"`
	Typename string `json:"__typename"`
	// A list of actor representations associated with the message (up to 10)
	Actors []MessageBatchMarkAsInteractedResponseActorsUnion `json:"actors"`
	// Timestamp when message was archived
	ArchivedAt time.Time `json:"archived_at,nullable" format:"date-time"`
	// Channel ID associated with the message
	ChannelID string `json:"channel_id" format:"uuid"`
	// Timestamp when message was clicked
	ClickedAt time.Time `json:"clicked_at,nullable" format:"date-time"`
	// Additional message data
	Data map[string]interface{} `json:"data,nullable"`
	// List of engagement statuses
	EngagementStatuses []MessageBatchMarkAsInteractedResponseEngagementStatus `json:"engagement_statuses"`
	// Timestamp of creation
	InsertedAt time.Time `json:"inserted_at" format:"date-time"`
	// Timestamp when message was interacted with
	InteractedAt time.Time `json:"interacted_at,nullable" format:"date-time"`
	// Timestamp when a link in the message was clicked
	LinkClickedAt time.Time `json:"link_clicked_at,nullable" format:"date-time"`
	// Message metadata
	Metadata map[string]interface{} `json:"metadata,nullable"`
	// Timestamp when message was read
	ReadAt time.Time `json:"read_at,nullable" format:"date-time"`
	// A reference to a recipient, either a user identifier (string) or an object
	// reference (id, collection).
	Recipient MessageBatchMarkAsInteractedResponseRecipientUnion `json:"recipient"`
	// Timestamp when message was scheduled for
	ScheduledAt time.Time `json:"scheduled_at,nullable" format:"date-time"`
	// Timestamp when message was seen
	SeenAt time.Time `json:"seen_at,nullable" format:"date-time"`
	// Source information
	Source MessageBatchMarkAsInteractedResponseSource `json:"source"`
	// Message delivery status
	Status MessageBatchMarkAsInteractedResponseStatus `json:"status"`
	// Tenant ID that the message belongs to
	Tenant string `json:"tenant,nullable"`
	// Timestamp of last update
	UpdatedAt time.Time `json:"updated_at" format:"date-time"`
	// Workflow key used to create the message
	//
	// Deprecated: deprecated
	Workflow string                                   `json:"workflow,nullable"`
	JSON     messageBatchMarkAsInteractedResponseJSON `json:"-"`
}

// messageBatchMarkAsInteractedResponseJSON contains the JSON metadata for the
// struct [MessageBatchMarkAsInteractedResponse]
type messageBatchMarkAsInteractedResponseJSON struct {
	ID                 apijson.Field
	Typename           apijson.Field
	Actors             apijson.Field
	ArchivedAt         apijson.Field
	ChannelID          apijson.Field
	ClickedAt          apijson.Field
	Data               apijson.Field
	EngagementStatuses apijson.Field
	InsertedAt         apijson.Field
	InteractedAt       apijson.Field
	LinkClickedAt      apijson.Field
	Metadata           apijson.Field
	ReadAt             apijson.Field
	Recipient          apijson.Field
	ScheduledAt        apijson.Field
	SeenAt             apijson.Field
	Source             apijson.Field
	Status             apijson.Field
	Tenant             apijson.Field
	UpdatedAt          apijson.Field
	Workflow           apijson.Field
	raw                string
	ExtraFields        map[string]apijson.Field
}

func (r *MessageBatchMarkAsInteractedResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchMarkAsInteractedResponseJSON) RawJSON() string {
	return r.raw
}

// A reference to a recipient, either a user identifier (string) or an object
// reference (id, collection).
//
// Union satisfied by [shared.UnionString] or
// [MessageBatchMarkAsInteractedResponseActorsObjectReference].
type MessageBatchMarkAsInteractedResponseActorsUnion interface {
	ImplementsMessageBatchMarkAsInteractedResponseActorsUnion()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*MessageBatchMarkAsInteractedResponseActorsUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.String,
			Type:       reflect.TypeOf(shared.UnionString("")),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(MessageBatchMarkAsInteractedResponseActorsObjectReference{}),
		},
	)
}

// An object reference to a recipient
type MessageBatchMarkAsInteractedResponseActorsObjectReference struct {
	// An object identifier
	ID string `json:"id,required"`
	// The collection the object belongs to
	Collection string                                                        `json:"collection,required"`
	JSON       messageBatchMarkAsInteractedResponseActorsObjectReferenceJSON `json:"-"`
}

// messageBatchMarkAsInteractedResponseActorsObjectReferenceJSON contains the JSON
// metadata for the struct
// [MessageBatchMarkAsInteractedResponseActorsObjectReference]
type messageBatchMarkAsInteractedResponseActorsObjectReferenceJSON struct {
	ID          apijson.Field
	Collection  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *MessageBatchMarkAsInteractedResponseActorsObjectReference) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchMarkAsInteractedResponseActorsObjectReferenceJSON) RawJSON() string {
	return r.raw
}

func (r MessageBatchMarkAsInteractedResponseActorsObjectReference) ImplementsMessageBatchMarkAsInteractedResponseActorsUnion() {
}

type MessageBatchMarkAsInteractedResponseEngagementStatus string

const (
	MessageBatchMarkAsInteractedResponseEngagementStatusSeen        MessageBatchMarkAsInteractedResponseEngagementStatus = "seen"
	MessageBatchMarkAsInteractedResponseEngagementStatusRead        MessageBatchMarkAsInteractedResponseEngagementStatus = "read"
	MessageBatchMarkAsInteractedResponseEngagementStatusInteracted  MessageBatchMarkAsInteractedResponseEngagementStatus = "interacted"
	MessageBatchMarkAsInteractedResponseEngagementStatusLinkClicked MessageBatchMarkAsInteractedResponseEngagementStatus = "link_clicked"
	MessageBatchMarkAsInteractedResponseEngagementStatusArchived    MessageBatchMarkAsInteractedResponseEngagementStatus = "archived"
)

func (r MessageBatchMarkAsInteractedResponseEngagementStatus) IsKnown() bool {
	switch r {
	case MessageBatchMarkAsInteractedResponseEngagementStatusSeen, MessageBatchMarkAsInteractedResponseEngagementStatusRead, MessageBatchMarkAsInteractedResponseEngagementStatusInteracted, MessageBatchMarkAsInteractedResponseEngagementStatusLinkClicked, MessageBatchMarkAsInteractedResponseEngagementStatusArchived:
		return true
	}
	return false
}

// A reference to a recipient, either a user identifier (string) or an object
// reference (id, collection).
//
// Union satisfied by [shared.UnionString] or
// [MessageBatchMarkAsInteractedResponseRecipientObjectReference].
type MessageBatchMarkAsInteractedResponseRecipientUnion interface {
	ImplementsMessageBatchMarkAsInteractedResponseRecipientUnion()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*MessageBatchMarkAsInteractedResponseRecipientUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.String,
			Type:       reflect.TypeOf(shared.UnionString("")),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(MessageBatchMarkAsInteractedResponseRecipientObjectReference{}),
		},
	)
}

// An object reference to a recipient
type MessageBatchMarkAsInteractedResponseRecipientObjectReference struct {
	// An object identifier
	ID string `json:"id,required"`
	// The collection the object belongs to
	Collection string                                                           `json:"collection,required"`
	JSON       messageBatchMarkAsInteractedResponseRecipientObjectReferenceJSON `json:"-"`
}

// messageBatchMarkAsInteractedResponseRecipientObjectReferenceJSON contains the
// JSON metadata for the struct
// [MessageBatchMarkAsInteractedResponseRecipientObjectReference]
type messageBatchMarkAsInteractedResponseRecipientObjectReferenceJSON struct {
	ID          apijson.Field
	Collection  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *MessageBatchMarkAsInteractedResponseRecipientObjectReference) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchMarkAsInteractedResponseRecipientObjectReferenceJSON) RawJSON() string {
	return r.raw
}

func (r MessageBatchMarkAsInteractedResponseRecipientObjectReference) ImplementsMessageBatchMarkAsInteractedResponseRecipientUnion() {
}

// Source information
type MessageBatchMarkAsInteractedResponseSource struct {
	Typename string `json:"__typename,required"`
	// The workflow categories
	Categories []string `json:"categories,required"`
	// The workflow key
	Key string `json:"key,required"`
	// The source version ID
	VersionID string                                         `json:"version_id,required" format:"uuid"`
	JSON      messageBatchMarkAsInteractedResponseSourceJSON `json:"-"`
}

// messageBatchMarkAsInteractedResponseSourceJSON contains the JSON metadata for
// the struct [MessageBatchMarkAsInteractedResponseSource]
type messageBatchMarkAsInteractedResponseSourceJSON struct {
	Typename    apijson.Field
	Categories  apijson.Field
	Key         apijson.Field
	VersionID   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *MessageBatchMarkAsInteractedResponseSource) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchMarkAsInteractedResponseSourceJSON) RawJSON() string {
	return r.raw
}

// Message delivery status
type MessageBatchMarkAsInteractedResponseStatus string

const (
	MessageBatchMarkAsInteractedResponseStatusQueued            MessageBatchMarkAsInteractedResponseStatus = "queued"
	MessageBatchMarkAsInteractedResponseStatusSent              MessageBatchMarkAsInteractedResponseStatus = "sent"
	MessageBatchMarkAsInteractedResponseStatusDelivered         MessageBatchMarkAsInteractedResponseStatus = "delivered"
	MessageBatchMarkAsInteractedResponseStatusDeliveryAttempted MessageBatchMarkAsInteractedResponseStatus = "delivery_attempted"
	MessageBatchMarkAsInteractedResponseStatusUndelivered       MessageBatchMarkAsInteractedResponseStatus = "undelivered"
	MessageBatchMarkAsInteractedResponseStatusNotSent           MessageBatchMarkAsInteractedResponseStatus = "not_sent"
	MessageBatchMarkAsInteractedResponseStatusBounced           MessageBatchMarkAsInteractedResponseStatus = "bounced"
)

func (r MessageBatchMarkAsInteractedResponseStatus) IsKnown() bool {
	switch r {
	case MessageBatchMarkAsInteractedResponseStatusQueued, MessageBatchMarkAsInteractedResponseStatusSent, MessageBatchMarkAsInteractedResponseStatusDelivered, MessageBatchMarkAsInteractedResponseStatusDeliveryAttempted, MessageBatchMarkAsInteractedResponseStatusUndelivered, MessageBatchMarkAsInteractedResponseStatusNotSent, MessageBatchMarkAsInteractedResponseStatusBounced:
		return true
	}
	return false
}

// Represents a single message that was generated by a workflow for a given
// channel.
type MessageBatchMarkAsReadResponse struct {
	// The message ID
	ID       string `json:"id"`
	Typename string `json:"__typename"`
	// A list of actor representations associated with the message (up to 10)
	Actors []MessageBatchMarkAsReadResponseActorsUnion `json:"actors"`
	// Timestamp when message was archived
	ArchivedAt time.Time `json:"archived_at,nullable" format:"date-time"`
	// Channel ID associated with the message
	ChannelID string `json:"channel_id" format:"uuid"`
	// Timestamp when message was clicked
	ClickedAt time.Time `json:"clicked_at,nullable" format:"date-time"`
	// Additional message data
	Data map[string]interface{} `json:"data,nullable"`
	// List of engagement statuses
	EngagementStatuses []MessageBatchMarkAsReadResponseEngagementStatus `json:"engagement_statuses"`
	// Timestamp of creation
	InsertedAt time.Time `json:"inserted_at" format:"date-time"`
	// Timestamp when message was interacted with
	InteractedAt time.Time `json:"interacted_at,nullable" format:"date-time"`
	// Timestamp when a link in the message was clicked
	LinkClickedAt time.Time `json:"link_clicked_at,nullable" format:"date-time"`
	// Message metadata
	Metadata map[string]interface{} `json:"metadata,nullable"`
	// Timestamp when message was read
	ReadAt time.Time `json:"read_at,nullable" format:"date-time"`
	// A reference to a recipient, either a user identifier (string) or an object
	// reference (id, collection).
	Recipient MessageBatchMarkAsReadResponseRecipientUnion `json:"recipient"`
	// Timestamp when message was scheduled for
	ScheduledAt time.Time `json:"scheduled_at,nullable" format:"date-time"`
	// Timestamp when message was seen
	SeenAt time.Time `json:"seen_at,nullable" format:"date-time"`
	// Source information
	Source MessageBatchMarkAsReadResponseSource `json:"source"`
	// Message delivery status
	Status MessageBatchMarkAsReadResponseStatus `json:"status"`
	// Tenant ID that the message belongs to
	Tenant string `json:"tenant,nullable"`
	// Timestamp of last update
	UpdatedAt time.Time `json:"updated_at" format:"date-time"`
	// Workflow key used to create the message
	//
	// Deprecated: deprecated
	Workflow string                             `json:"workflow,nullable"`
	JSON     messageBatchMarkAsReadResponseJSON `json:"-"`
}

// messageBatchMarkAsReadResponseJSON contains the JSON metadata for the struct
// [MessageBatchMarkAsReadResponse]
type messageBatchMarkAsReadResponseJSON struct {
	ID                 apijson.Field
	Typename           apijson.Field
	Actors             apijson.Field
	ArchivedAt         apijson.Field
	ChannelID          apijson.Field
	ClickedAt          apijson.Field
	Data               apijson.Field
	EngagementStatuses apijson.Field
	InsertedAt         apijson.Field
	InteractedAt       apijson.Field
	LinkClickedAt      apijson.Field
	Metadata           apijson.Field
	ReadAt             apijson.Field
	Recipient          apijson.Field
	ScheduledAt        apijson.Field
	SeenAt             apijson.Field
	Source             apijson.Field
	Status             apijson.Field
	Tenant             apijson.Field
	UpdatedAt          apijson.Field
	Workflow           apijson.Field
	raw                string
	ExtraFields        map[string]apijson.Field
}

func (r *MessageBatchMarkAsReadResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchMarkAsReadResponseJSON) RawJSON() string {
	return r.raw
}

// A reference to a recipient, either a user identifier (string) or an object
// reference (id, collection).
//
// Union satisfied by [shared.UnionString] or
// [MessageBatchMarkAsReadResponseActorsObjectReference].
type MessageBatchMarkAsReadResponseActorsUnion interface {
	ImplementsMessageBatchMarkAsReadResponseActorsUnion()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*MessageBatchMarkAsReadResponseActorsUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.String,
			Type:       reflect.TypeOf(shared.UnionString("")),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(MessageBatchMarkAsReadResponseActorsObjectReference{}),
		},
	)
}

// An object reference to a recipient
type MessageBatchMarkAsReadResponseActorsObjectReference struct {
	// An object identifier
	ID string `json:"id,required"`
	// The collection the object belongs to
	Collection string                                                  `json:"collection,required"`
	JSON       messageBatchMarkAsReadResponseActorsObjectReferenceJSON `json:"-"`
}

// messageBatchMarkAsReadResponseActorsObjectReferenceJSON contains the JSON
// metadata for the struct [MessageBatchMarkAsReadResponseActorsObjectReference]
type messageBatchMarkAsReadResponseActorsObjectReferenceJSON struct {
	ID          apijson.Field
	Collection  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *MessageBatchMarkAsReadResponseActorsObjectReference) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchMarkAsReadResponseActorsObjectReferenceJSON) RawJSON() string {
	return r.raw
}

func (r MessageBatchMarkAsReadResponseActorsObjectReference) ImplementsMessageBatchMarkAsReadResponseActorsUnion() {
}

type MessageBatchMarkAsReadResponseEngagementStatus string

const (
	MessageBatchMarkAsReadResponseEngagementStatusSeen        MessageBatchMarkAsReadResponseEngagementStatus = "seen"
	MessageBatchMarkAsReadResponseEngagementStatusRead        MessageBatchMarkAsReadResponseEngagementStatus = "read"
	MessageBatchMarkAsReadResponseEngagementStatusInteracted  MessageBatchMarkAsReadResponseEngagementStatus = "interacted"
	MessageBatchMarkAsReadResponseEngagementStatusLinkClicked MessageBatchMarkAsReadResponseEngagementStatus = "link_clicked"
	MessageBatchMarkAsReadResponseEngagementStatusArchived    MessageBatchMarkAsReadResponseEngagementStatus = "archived"
)

func (r MessageBatchMarkAsReadResponseEngagementStatus) IsKnown() bool {
	switch r {
	case MessageBatchMarkAsReadResponseEngagementStatusSeen, MessageBatchMarkAsReadResponseEngagementStatusRead, MessageBatchMarkAsReadResponseEngagementStatusInteracted, MessageBatchMarkAsReadResponseEngagementStatusLinkClicked, MessageBatchMarkAsReadResponseEngagementStatusArchived:
		return true
	}
	return false
}

// A reference to a recipient, either a user identifier (string) or an object
// reference (id, collection).
//
// Union satisfied by [shared.UnionString] or
// [MessageBatchMarkAsReadResponseRecipientObjectReference].
type MessageBatchMarkAsReadResponseRecipientUnion interface {
	ImplementsMessageBatchMarkAsReadResponseRecipientUnion()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*MessageBatchMarkAsReadResponseRecipientUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.String,
			Type:       reflect.TypeOf(shared.UnionString("")),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(MessageBatchMarkAsReadResponseRecipientObjectReference{}),
		},
	)
}

// An object reference to a recipient
type MessageBatchMarkAsReadResponseRecipientObjectReference struct {
	// An object identifier
	ID string `json:"id,required"`
	// The collection the object belongs to
	Collection string                                                     `json:"collection,required"`
	JSON       messageBatchMarkAsReadResponseRecipientObjectReferenceJSON `json:"-"`
}

// messageBatchMarkAsReadResponseRecipientObjectReferenceJSON contains the JSON
// metadata for the struct [MessageBatchMarkAsReadResponseRecipientObjectReference]
type messageBatchMarkAsReadResponseRecipientObjectReferenceJSON struct {
	ID          apijson.Field
	Collection  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *MessageBatchMarkAsReadResponseRecipientObjectReference) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchMarkAsReadResponseRecipientObjectReferenceJSON) RawJSON() string {
	return r.raw
}

func (r MessageBatchMarkAsReadResponseRecipientObjectReference) ImplementsMessageBatchMarkAsReadResponseRecipientUnion() {
}

// Source information
type MessageBatchMarkAsReadResponseSource struct {
	Typename string `json:"__typename,required"`
	// The workflow categories
	Categories []string `json:"categories,required"`
	// The workflow key
	Key string `json:"key,required"`
	// The source version ID
	VersionID string                                   `json:"version_id,required" format:"uuid"`
	JSON      messageBatchMarkAsReadResponseSourceJSON `json:"-"`
}

// messageBatchMarkAsReadResponseSourceJSON contains the JSON metadata for the
// struct [MessageBatchMarkAsReadResponseSource]
type messageBatchMarkAsReadResponseSourceJSON struct {
	Typename    apijson.Field
	Categories  apijson.Field
	Key         apijson.Field
	VersionID   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *MessageBatchMarkAsReadResponseSource) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchMarkAsReadResponseSourceJSON) RawJSON() string {
	return r.raw
}

// Message delivery status
type MessageBatchMarkAsReadResponseStatus string

const (
	MessageBatchMarkAsReadResponseStatusQueued            MessageBatchMarkAsReadResponseStatus = "queued"
	MessageBatchMarkAsReadResponseStatusSent              MessageBatchMarkAsReadResponseStatus = "sent"
	MessageBatchMarkAsReadResponseStatusDelivered         MessageBatchMarkAsReadResponseStatus = "delivered"
	MessageBatchMarkAsReadResponseStatusDeliveryAttempted MessageBatchMarkAsReadResponseStatus = "delivery_attempted"
	MessageBatchMarkAsReadResponseStatusUndelivered       MessageBatchMarkAsReadResponseStatus = "undelivered"
	MessageBatchMarkAsReadResponseStatusNotSent           MessageBatchMarkAsReadResponseStatus = "not_sent"
	MessageBatchMarkAsReadResponseStatusBounced           MessageBatchMarkAsReadResponseStatus = "bounced"
)

func (r MessageBatchMarkAsReadResponseStatus) IsKnown() bool {
	switch r {
	case MessageBatchMarkAsReadResponseStatusQueued, MessageBatchMarkAsReadResponseStatusSent, MessageBatchMarkAsReadResponseStatusDelivered, MessageBatchMarkAsReadResponseStatusDeliveryAttempted, MessageBatchMarkAsReadResponseStatusUndelivered, MessageBatchMarkAsReadResponseStatusNotSent, MessageBatchMarkAsReadResponseStatusBounced:
		return true
	}
	return false
}

// Represents a single message that was generated by a workflow for a given
// channel.
type MessageBatchMarkAsSeenResponse struct {
	// The message ID
	ID       string `json:"id"`
	Typename string `json:"__typename"`
	// A list of actor representations associated with the message (up to 10)
	Actors []MessageBatchMarkAsSeenResponseActorsUnion `json:"actors"`
	// Timestamp when message was archived
	ArchivedAt time.Time `json:"archived_at,nullable" format:"date-time"`
	// Channel ID associated with the message
	ChannelID string `json:"channel_id" format:"uuid"`
	// Timestamp when message was clicked
	ClickedAt time.Time `json:"clicked_at,nullable" format:"date-time"`
	// Additional message data
	Data map[string]interface{} `json:"data,nullable"`
	// List of engagement statuses
	EngagementStatuses []MessageBatchMarkAsSeenResponseEngagementStatus `json:"engagement_statuses"`
	// Timestamp of creation
	InsertedAt time.Time `json:"inserted_at" format:"date-time"`
	// Timestamp when message was interacted with
	InteractedAt time.Time `json:"interacted_at,nullable" format:"date-time"`
	// Timestamp when a link in the message was clicked
	LinkClickedAt time.Time `json:"link_clicked_at,nullable" format:"date-time"`
	// Message metadata
	Metadata map[string]interface{} `json:"metadata,nullable"`
	// Timestamp when message was read
	ReadAt time.Time `json:"read_at,nullable" format:"date-time"`
	// A reference to a recipient, either a user identifier (string) or an object
	// reference (id, collection).
	Recipient MessageBatchMarkAsSeenResponseRecipientUnion `json:"recipient"`
	// Timestamp when message was scheduled for
	ScheduledAt time.Time `json:"scheduled_at,nullable" format:"date-time"`
	// Timestamp when message was seen
	SeenAt time.Time `json:"seen_at,nullable" format:"date-time"`
	// Source information
	Source MessageBatchMarkAsSeenResponseSource `json:"source"`
	// Message delivery status
	Status MessageBatchMarkAsSeenResponseStatus `json:"status"`
	// Tenant ID that the message belongs to
	Tenant string `json:"tenant,nullable"`
	// Timestamp of last update
	UpdatedAt time.Time `json:"updated_at" format:"date-time"`
	// Workflow key used to create the message
	//
	// Deprecated: deprecated
	Workflow string                             `json:"workflow,nullable"`
	JSON     messageBatchMarkAsSeenResponseJSON `json:"-"`
}

// messageBatchMarkAsSeenResponseJSON contains the JSON metadata for the struct
// [MessageBatchMarkAsSeenResponse]
type messageBatchMarkAsSeenResponseJSON struct {
	ID                 apijson.Field
	Typename           apijson.Field
	Actors             apijson.Field
	ArchivedAt         apijson.Field
	ChannelID          apijson.Field
	ClickedAt          apijson.Field
	Data               apijson.Field
	EngagementStatuses apijson.Field
	InsertedAt         apijson.Field
	InteractedAt       apijson.Field
	LinkClickedAt      apijson.Field
	Metadata           apijson.Field
	ReadAt             apijson.Field
	Recipient          apijson.Field
	ScheduledAt        apijson.Field
	SeenAt             apijson.Field
	Source             apijson.Field
	Status             apijson.Field
	Tenant             apijson.Field
	UpdatedAt          apijson.Field
	Workflow           apijson.Field
	raw                string
	ExtraFields        map[string]apijson.Field
}

func (r *MessageBatchMarkAsSeenResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchMarkAsSeenResponseJSON) RawJSON() string {
	return r.raw
}

// A reference to a recipient, either a user identifier (string) or an object
// reference (id, collection).
//
// Union satisfied by [shared.UnionString] or
// [MessageBatchMarkAsSeenResponseActorsObjectReference].
type MessageBatchMarkAsSeenResponseActorsUnion interface {
	ImplementsMessageBatchMarkAsSeenResponseActorsUnion()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*MessageBatchMarkAsSeenResponseActorsUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.String,
			Type:       reflect.TypeOf(shared.UnionString("")),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(MessageBatchMarkAsSeenResponseActorsObjectReference{}),
		},
	)
}

// An object reference to a recipient
type MessageBatchMarkAsSeenResponseActorsObjectReference struct {
	// An object identifier
	ID string `json:"id,required"`
	// The collection the object belongs to
	Collection string                                                  `json:"collection,required"`
	JSON       messageBatchMarkAsSeenResponseActorsObjectReferenceJSON `json:"-"`
}

// messageBatchMarkAsSeenResponseActorsObjectReferenceJSON contains the JSON
// metadata for the struct [MessageBatchMarkAsSeenResponseActorsObjectReference]
type messageBatchMarkAsSeenResponseActorsObjectReferenceJSON struct {
	ID          apijson.Field
	Collection  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *MessageBatchMarkAsSeenResponseActorsObjectReference) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchMarkAsSeenResponseActorsObjectReferenceJSON) RawJSON() string {
	return r.raw
}

func (r MessageBatchMarkAsSeenResponseActorsObjectReference) ImplementsMessageBatchMarkAsSeenResponseActorsUnion() {
}

type MessageBatchMarkAsSeenResponseEngagementStatus string

const (
	MessageBatchMarkAsSeenResponseEngagementStatusSeen        MessageBatchMarkAsSeenResponseEngagementStatus = "seen"
	MessageBatchMarkAsSeenResponseEngagementStatusRead        MessageBatchMarkAsSeenResponseEngagementStatus = "read"
	MessageBatchMarkAsSeenResponseEngagementStatusInteracted  MessageBatchMarkAsSeenResponseEngagementStatus = "interacted"
	MessageBatchMarkAsSeenResponseEngagementStatusLinkClicked MessageBatchMarkAsSeenResponseEngagementStatus = "link_clicked"
	MessageBatchMarkAsSeenResponseEngagementStatusArchived    MessageBatchMarkAsSeenResponseEngagementStatus = "archived"
)

func (r MessageBatchMarkAsSeenResponseEngagementStatus) IsKnown() bool {
	switch r {
	case MessageBatchMarkAsSeenResponseEngagementStatusSeen, MessageBatchMarkAsSeenResponseEngagementStatusRead, MessageBatchMarkAsSeenResponseEngagementStatusInteracted, MessageBatchMarkAsSeenResponseEngagementStatusLinkClicked, MessageBatchMarkAsSeenResponseEngagementStatusArchived:
		return true
	}
	return false
}

// A reference to a recipient, either a user identifier (string) or an object
// reference (id, collection).
//
// Union satisfied by [shared.UnionString] or
// [MessageBatchMarkAsSeenResponseRecipientObjectReference].
type MessageBatchMarkAsSeenResponseRecipientUnion interface {
	ImplementsMessageBatchMarkAsSeenResponseRecipientUnion()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*MessageBatchMarkAsSeenResponseRecipientUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.String,
			Type:       reflect.TypeOf(shared.UnionString("")),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(MessageBatchMarkAsSeenResponseRecipientObjectReference{}),
		},
	)
}

// An object reference to a recipient
type MessageBatchMarkAsSeenResponseRecipientObjectReference struct {
	// An object identifier
	ID string `json:"id,required"`
	// The collection the object belongs to
	Collection string                                                     `json:"collection,required"`
	JSON       messageBatchMarkAsSeenResponseRecipientObjectReferenceJSON `json:"-"`
}

// messageBatchMarkAsSeenResponseRecipientObjectReferenceJSON contains the JSON
// metadata for the struct [MessageBatchMarkAsSeenResponseRecipientObjectReference]
type messageBatchMarkAsSeenResponseRecipientObjectReferenceJSON struct {
	ID          apijson.Field
	Collection  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *MessageBatchMarkAsSeenResponseRecipientObjectReference) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchMarkAsSeenResponseRecipientObjectReferenceJSON) RawJSON() string {
	return r.raw
}

func (r MessageBatchMarkAsSeenResponseRecipientObjectReference) ImplementsMessageBatchMarkAsSeenResponseRecipientUnion() {
}

// Source information
type MessageBatchMarkAsSeenResponseSource struct {
	Typename string `json:"__typename,required"`
	// The workflow categories
	Categories []string `json:"categories,required"`
	// The workflow key
	Key string `json:"key,required"`
	// The source version ID
	VersionID string                                   `json:"version_id,required" format:"uuid"`
	JSON      messageBatchMarkAsSeenResponseSourceJSON `json:"-"`
}

// messageBatchMarkAsSeenResponseSourceJSON contains the JSON metadata for the
// struct [MessageBatchMarkAsSeenResponseSource]
type messageBatchMarkAsSeenResponseSourceJSON struct {
	Typename    apijson.Field
	Categories  apijson.Field
	Key         apijson.Field
	VersionID   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *MessageBatchMarkAsSeenResponseSource) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchMarkAsSeenResponseSourceJSON) RawJSON() string {
	return r.raw
}

// Message delivery status
type MessageBatchMarkAsSeenResponseStatus string

const (
	MessageBatchMarkAsSeenResponseStatusQueued            MessageBatchMarkAsSeenResponseStatus = "queued"
	MessageBatchMarkAsSeenResponseStatusSent              MessageBatchMarkAsSeenResponseStatus = "sent"
	MessageBatchMarkAsSeenResponseStatusDelivered         MessageBatchMarkAsSeenResponseStatus = "delivered"
	MessageBatchMarkAsSeenResponseStatusDeliveryAttempted MessageBatchMarkAsSeenResponseStatus = "delivery_attempted"
	MessageBatchMarkAsSeenResponseStatusUndelivered       MessageBatchMarkAsSeenResponseStatus = "undelivered"
	MessageBatchMarkAsSeenResponseStatusNotSent           MessageBatchMarkAsSeenResponseStatus = "not_sent"
	MessageBatchMarkAsSeenResponseStatusBounced           MessageBatchMarkAsSeenResponseStatus = "bounced"
)

func (r MessageBatchMarkAsSeenResponseStatus) IsKnown() bool {
	switch r {
	case MessageBatchMarkAsSeenResponseStatusQueued, MessageBatchMarkAsSeenResponseStatusSent, MessageBatchMarkAsSeenResponseStatusDelivered, MessageBatchMarkAsSeenResponseStatusDeliveryAttempted, MessageBatchMarkAsSeenResponseStatusUndelivered, MessageBatchMarkAsSeenResponseStatusNotSent, MessageBatchMarkAsSeenResponseStatusBounced:
		return true
	}
	return false
}

// Represents a single message that was generated by a workflow for a given
// channel.
type MessageBatchMarkAsUnreadResponse struct {
	// The message ID
	ID       string `json:"id"`
	Typename string `json:"__typename"`
	// A list of actor representations associated with the message (up to 10)
	Actors []MessageBatchMarkAsUnreadResponseActorsUnion `json:"actors"`
	// Timestamp when message was archived
	ArchivedAt time.Time `json:"archived_at,nullable" format:"date-time"`
	// Channel ID associated with the message
	ChannelID string `json:"channel_id" format:"uuid"`
	// Timestamp when message was clicked
	ClickedAt time.Time `json:"clicked_at,nullable" format:"date-time"`
	// Additional message data
	Data map[string]interface{} `json:"data,nullable"`
	// List of engagement statuses
	EngagementStatuses []MessageBatchMarkAsUnreadResponseEngagementStatus `json:"engagement_statuses"`
	// Timestamp of creation
	InsertedAt time.Time `json:"inserted_at" format:"date-time"`
	// Timestamp when message was interacted with
	InteractedAt time.Time `json:"interacted_at,nullable" format:"date-time"`
	// Timestamp when a link in the message was clicked
	LinkClickedAt time.Time `json:"link_clicked_at,nullable" format:"date-time"`
	// Message metadata
	Metadata map[string]interface{} `json:"metadata,nullable"`
	// Timestamp when message was read
	ReadAt time.Time `json:"read_at,nullable" format:"date-time"`
	// A reference to a recipient, either a user identifier (string) or an object
	// reference (id, collection).
	Recipient MessageBatchMarkAsUnreadResponseRecipientUnion `json:"recipient"`
	// Timestamp when message was scheduled for
	ScheduledAt time.Time `json:"scheduled_at,nullable" format:"date-time"`
	// Timestamp when message was seen
	SeenAt time.Time `json:"seen_at,nullable" format:"date-time"`
	// Source information
	Source MessageBatchMarkAsUnreadResponseSource `json:"source"`
	// Message delivery status
	Status MessageBatchMarkAsUnreadResponseStatus `json:"status"`
	// Tenant ID that the message belongs to
	Tenant string `json:"tenant,nullable"`
	// Timestamp of last update
	UpdatedAt time.Time `json:"updated_at" format:"date-time"`
	// Workflow key used to create the message
	//
	// Deprecated: deprecated
	Workflow string                               `json:"workflow,nullable"`
	JSON     messageBatchMarkAsUnreadResponseJSON `json:"-"`
}

// messageBatchMarkAsUnreadResponseJSON contains the JSON metadata for the struct
// [MessageBatchMarkAsUnreadResponse]
type messageBatchMarkAsUnreadResponseJSON struct {
	ID                 apijson.Field
	Typename           apijson.Field
	Actors             apijson.Field
	ArchivedAt         apijson.Field
	ChannelID          apijson.Field
	ClickedAt          apijson.Field
	Data               apijson.Field
	EngagementStatuses apijson.Field
	InsertedAt         apijson.Field
	InteractedAt       apijson.Field
	LinkClickedAt      apijson.Field
	Metadata           apijson.Field
	ReadAt             apijson.Field
	Recipient          apijson.Field
	ScheduledAt        apijson.Field
	SeenAt             apijson.Field
	Source             apijson.Field
	Status             apijson.Field
	Tenant             apijson.Field
	UpdatedAt          apijson.Field
	Workflow           apijson.Field
	raw                string
	ExtraFields        map[string]apijson.Field
}

func (r *MessageBatchMarkAsUnreadResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchMarkAsUnreadResponseJSON) RawJSON() string {
	return r.raw
}

// A reference to a recipient, either a user identifier (string) or an object
// reference (id, collection).
//
// Union satisfied by [shared.UnionString] or
// [MessageBatchMarkAsUnreadResponseActorsObjectReference].
type MessageBatchMarkAsUnreadResponseActorsUnion interface {
	ImplementsMessageBatchMarkAsUnreadResponseActorsUnion()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*MessageBatchMarkAsUnreadResponseActorsUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.String,
			Type:       reflect.TypeOf(shared.UnionString("")),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(MessageBatchMarkAsUnreadResponseActorsObjectReference{}),
		},
	)
}

// An object reference to a recipient
type MessageBatchMarkAsUnreadResponseActorsObjectReference struct {
	// An object identifier
	ID string `json:"id,required"`
	// The collection the object belongs to
	Collection string                                                    `json:"collection,required"`
	JSON       messageBatchMarkAsUnreadResponseActorsObjectReferenceJSON `json:"-"`
}

// messageBatchMarkAsUnreadResponseActorsObjectReferenceJSON contains the JSON
// metadata for the struct [MessageBatchMarkAsUnreadResponseActorsObjectReference]
type messageBatchMarkAsUnreadResponseActorsObjectReferenceJSON struct {
	ID          apijson.Field
	Collection  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *MessageBatchMarkAsUnreadResponseActorsObjectReference) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchMarkAsUnreadResponseActorsObjectReferenceJSON) RawJSON() string {
	return r.raw
}

func (r MessageBatchMarkAsUnreadResponseActorsObjectReference) ImplementsMessageBatchMarkAsUnreadResponseActorsUnion() {
}

type MessageBatchMarkAsUnreadResponseEngagementStatus string

const (
	MessageBatchMarkAsUnreadResponseEngagementStatusSeen        MessageBatchMarkAsUnreadResponseEngagementStatus = "seen"
	MessageBatchMarkAsUnreadResponseEngagementStatusRead        MessageBatchMarkAsUnreadResponseEngagementStatus = "read"
	MessageBatchMarkAsUnreadResponseEngagementStatusInteracted  MessageBatchMarkAsUnreadResponseEngagementStatus = "interacted"
	MessageBatchMarkAsUnreadResponseEngagementStatusLinkClicked MessageBatchMarkAsUnreadResponseEngagementStatus = "link_clicked"
	MessageBatchMarkAsUnreadResponseEngagementStatusArchived    MessageBatchMarkAsUnreadResponseEngagementStatus = "archived"
)

func (r MessageBatchMarkAsUnreadResponseEngagementStatus) IsKnown() bool {
	switch r {
	case MessageBatchMarkAsUnreadResponseEngagementStatusSeen, MessageBatchMarkAsUnreadResponseEngagementStatusRead, MessageBatchMarkAsUnreadResponseEngagementStatusInteracted, MessageBatchMarkAsUnreadResponseEngagementStatusLinkClicked, MessageBatchMarkAsUnreadResponseEngagementStatusArchived:
		return true
	}
	return false
}

// A reference to a recipient, either a user identifier (string) or an object
// reference (id, collection).
//
// Union satisfied by [shared.UnionString] or
// [MessageBatchMarkAsUnreadResponseRecipientObjectReference].
type MessageBatchMarkAsUnreadResponseRecipientUnion interface {
	ImplementsMessageBatchMarkAsUnreadResponseRecipientUnion()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*MessageBatchMarkAsUnreadResponseRecipientUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.String,
			Type:       reflect.TypeOf(shared.UnionString("")),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(MessageBatchMarkAsUnreadResponseRecipientObjectReference{}),
		},
	)
}

// An object reference to a recipient
type MessageBatchMarkAsUnreadResponseRecipientObjectReference struct {
	// An object identifier
	ID string `json:"id,required"`
	// The collection the object belongs to
	Collection string                                                       `json:"collection,required"`
	JSON       messageBatchMarkAsUnreadResponseRecipientObjectReferenceJSON `json:"-"`
}

// messageBatchMarkAsUnreadResponseRecipientObjectReferenceJSON contains the JSON
// metadata for the struct
// [MessageBatchMarkAsUnreadResponseRecipientObjectReference]
type messageBatchMarkAsUnreadResponseRecipientObjectReferenceJSON struct {
	ID          apijson.Field
	Collection  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *MessageBatchMarkAsUnreadResponseRecipientObjectReference) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchMarkAsUnreadResponseRecipientObjectReferenceJSON) RawJSON() string {
	return r.raw
}

func (r MessageBatchMarkAsUnreadResponseRecipientObjectReference) ImplementsMessageBatchMarkAsUnreadResponseRecipientUnion() {
}

// Source information
type MessageBatchMarkAsUnreadResponseSource struct {
	Typename string `json:"__typename,required"`
	// The workflow categories
	Categories []string `json:"categories,required"`
	// The workflow key
	Key string `json:"key,required"`
	// The source version ID
	VersionID string                                     `json:"version_id,required" format:"uuid"`
	JSON      messageBatchMarkAsUnreadResponseSourceJSON `json:"-"`
}

// messageBatchMarkAsUnreadResponseSourceJSON contains the JSON metadata for the
// struct [MessageBatchMarkAsUnreadResponseSource]
type messageBatchMarkAsUnreadResponseSourceJSON struct {
	Typename    apijson.Field
	Categories  apijson.Field
	Key         apijson.Field
	VersionID   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *MessageBatchMarkAsUnreadResponseSource) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchMarkAsUnreadResponseSourceJSON) RawJSON() string {
	return r.raw
}

// Message delivery status
type MessageBatchMarkAsUnreadResponseStatus string

const (
	MessageBatchMarkAsUnreadResponseStatusQueued            MessageBatchMarkAsUnreadResponseStatus = "queued"
	MessageBatchMarkAsUnreadResponseStatusSent              MessageBatchMarkAsUnreadResponseStatus = "sent"
	MessageBatchMarkAsUnreadResponseStatusDelivered         MessageBatchMarkAsUnreadResponseStatus = "delivered"
	MessageBatchMarkAsUnreadResponseStatusDeliveryAttempted MessageBatchMarkAsUnreadResponseStatus = "delivery_attempted"
	MessageBatchMarkAsUnreadResponseStatusUndelivered       MessageBatchMarkAsUnreadResponseStatus = "undelivered"
	MessageBatchMarkAsUnreadResponseStatusNotSent           MessageBatchMarkAsUnreadResponseStatus = "not_sent"
	MessageBatchMarkAsUnreadResponseStatusBounced           MessageBatchMarkAsUnreadResponseStatus = "bounced"
)

func (r MessageBatchMarkAsUnreadResponseStatus) IsKnown() bool {
	switch r {
	case MessageBatchMarkAsUnreadResponseStatusQueued, MessageBatchMarkAsUnreadResponseStatusSent, MessageBatchMarkAsUnreadResponseStatusDelivered, MessageBatchMarkAsUnreadResponseStatusDeliveryAttempted, MessageBatchMarkAsUnreadResponseStatusUndelivered, MessageBatchMarkAsUnreadResponseStatusNotSent, MessageBatchMarkAsUnreadResponseStatusBounced:
		return true
	}
	return false
}

// Represents a single message that was generated by a workflow for a given
// channel.
type MessageBatchMarkAsUnseenResponse struct {
	// The message ID
	ID       string `json:"id"`
	Typename string `json:"__typename"`
	// A list of actor representations associated with the message (up to 10)
	Actors []MessageBatchMarkAsUnseenResponseActorsUnion `json:"actors"`
	// Timestamp when message was archived
	ArchivedAt time.Time `json:"archived_at,nullable" format:"date-time"`
	// Channel ID associated with the message
	ChannelID string `json:"channel_id" format:"uuid"`
	// Timestamp when message was clicked
	ClickedAt time.Time `json:"clicked_at,nullable" format:"date-time"`
	// Additional message data
	Data map[string]interface{} `json:"data,nullable"`
	// List of engagement statuses
	EngagementStatuses []MessageBatchMarkAsUnseenResponseEngagementStatus `json:"engagement_statuses"`
	// Timestamp of creation
	InsertedAt time.Time `json:"inserted_at" format:"date-time"`
	// Timestamp when message was interacted with
	InteractedAt time.Time `json:"interacted_at,nullable" format:"date-time"`
	// Timestamp when a link in the message was clicked
	LinkClickedAt time.Time `json:"link_clicked_at,nullable" format:"date-time"`
	// Message metadata
	Metadata map[string]interface{} `json:"metadata,nullable"`
	// Timestamp when message was read
	ReadAt time.Time `json:"read_at,nullable" format:"date-time"`
	// A reference to a recipient, either a user identifier (string) or an object
	// reference (id, collection).
	Recipient MessageBatchMarkAsUnseenResponseRecipientUnion `json:"recipient"`
	// Timestamp when message was scheduled for
	ScheduledAt time.Time `json:"scheduled_at,nullable" format:"date-time"`
	// Timestamp when message was seen
	SeenAt time.Time `json:"seen_at,nullable" format:"date-time"`
	// Source information
	Source MessageBatchMarkAsUnseenResponseSource `json:"source"`
	// Message delivery status
	Status MessageBatchMarkAsUnseenResponseStatus `json:"status"`
	// Tenant ID that the message belongs to
	Tenant string `json:"tenant,nullable"`
	// Timestamp of last update
	UpdatedAt time.Time `json:"updated_at" format:"date-time"`
	// Workflow key used to create the message
	//
	// Deprecated: deprecated
	Workflow string                               `json:"workflow,nullable"`
	JSON     messageBatchMarkAsUnseenResponseJSON `json:"-"`
}

// messageBatchMarkAsUnseenResponseJSON contains the JSON metadata for the struct
// [MessageBatchMarkAsUnseenResponse]
type messageBatchMarkAsUnseenResponseJSON struct {
	ID                 apijson.Field
	Typename           apijson.Field
	Actors             apijson.Field
	ArchivedAt         apijson.Field
	ChannelID          apijson.Field
	ClickedAt          apijson.Field
	Data               apijson.Field
	EngagementStatuses apijson.Field
	InsertedAt         apijson.Field
	InteractedAt       apijson.Field
	LinkClickedAt      apijson.Field
	Metadata           apijson.Field
	ReadAt             apijson.Field
	Recipient          apijson.Field
	ScheduledAt        apijson.Field
	SeenAt             apijson.Field
	Source             apijson.Field
	Status             apijson.Field
	Tenant             apijson.Field
	UpdatedAt          apijson.Field
	Workflow           apijson.Field
	raw                string
	ExtraFields        map[string]apijson.Field
}

func (r *MessageBatchMarkAsUnseenResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchMarkAsUnseenResponseJSON) RawJSON() string {
	return r.raw
}

// A reference to a recipient, either a user identifier (string) or an object
// reference (id, collection).
//
// Union satisfied by [shared.UnionString] or
// [MessageBatchMarkAsUnseenResponseActorsObjectReference].
type MessageBatchMarkAsUnseenResponseActorsUnion interface {
	ImplementsMessageBatchMarkAsUnseenResponseActorsUnion()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*MessageBatchMarkAsUnseenResponseActorsUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.String,
			Type:       reflect.TypeOf(shared.UnionString("")),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(MessageBatchMarkAsUnseenResponseActorsObjectReference{}),
		},
	)
}

// An object reference to a recipient
type MessageBatchMarkAsUnseenResponseActorsObjectReference struct {
	// An object identifier
	ID string `json:"id,required"`
	// The collection the object belongs to
	Collection string                                                    `json:"collection,required"`
	JSON       messageBatchMarkAsUnseenResponseActorsObjectReferenceJSON `json:"-"`
}

// messageBatchMarkAsUnseenResponseActorsObjectReferenceJSON contains the JSON
// metadata for the struct [MessageBatchMarkAsUnseenResponseActorsObjectReference]
type messageBatchMarkAsUnseenResponseActorsObjectReferenceJSON struct {
	ID          apijson.Field
	Collection  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *MessageBatchMarkAsUnseenResponseActorsObjectReference) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchMarkAsUnseenResponseActorsObjectReferenceJSON) RawJSON() string {
	return r.raw
}

func (r MessageBatchMarkAsUnseenResponseActorsObjectReference) ImplementsMessageBatchMarkAsUnseenResponseActorsUnion() {
}

type MessageBatchMarkAsUnseenResponseEngagementStatus string

const (
	MessageBatchMarkAsUnseenResponseEngagementStatusSeen        MessageBatchMarkAsUnseenResponseEngagementStatus = "seen"
	MessageBatchMarkAsUnseenResponseEngagementStatusRead        MessageBatchMarkAsUnseenResponseEngagementStatus = "read"
	MessageBatchMarkAsUnseenResponseEngagementStatusInteracted  MessageBatchMarkAsUnseenResponseEngagementStatus = "interacted"
	MessageBatchMarkAsUnseenResponseEngagementStatusLinkClicked MessageBatchMarkAsUnseenResponseEngagementStatus = "link_clicked"
	MessageBatchMarkAsUnseenResponseEngagementStatusArchived    MessageBatchMarkAsUnseenResponseEngagementStatus = "archived"
)

func (r MessageBatchMarkAsUnseenResponseEngagementStatus) IsKnown() bool {
	switch r {
	case MessageBatchMarkAsUnseenResponseEngagementStatusSeen, MessageBatchMarkAsUnseenResponseEngagementStatusRead, MessageBatchMarkAsUnseenResponseEngagementStatusInteracted, MessageBatchMarkAsUnseenResponseEngagementStatusLinkClicked, MessageBatchMarkAsUnseenResponseEngagementStatusArchived:
		return true
	}
	return false
}

// A reference to a recipient, either a user identifier (string) or an object
// reference (id, collection).
//
// Union satisfied by [shared.UnionString] or
// [MessageBatchMarkAsUnseenResponseRecipientObjectReference].
type MessageBatchMarkAsUnseenResponseRecipientUnion interface {
	ImplementsMessageBatchMarkAsUnseenResponseRecipientUnion()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*MessageBatchMarkAsUnseenResponseRecipientUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.String,
			Type:       reflect.TypeOf(shared.UnionString("")),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(MessageBatchMarkAsUnseenResponseRecipientObjectReference{}),
		},
	)
}

// An object reference to a recipient
type MessageBatchMarkAsUnseenResponseRecipientObjectReference struct {
	// An object identifier
	ID string `json:"id,required"`
	// The collection the object belongs to
	Collection string                                                       `json:"collection,required"`
	JSON       messageBatchMarkAsUnseenResponseRecipientObjectReferenceJSON `json:"-"`
}

// messageBatchMarkAsUnseenResponseRecipientObjectReferenceJSON contains the JSON
// metadata for the struct
// [MessageBatchMarkAsUnseenResponseRecipientObjectReference]
type messageBatchMarkAsUnseenResponseRecipientObjectReferenceJSON struct {
	ID          apijson.Field
	Collection  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *MessageBatchMarkAsUnseenResponseRecipientObjectReference) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchMarkAsUnseenResponseRecipientObjectReferenceJSON) RawJSON() string {
	return r.raw
}

func (r MessageBatchMarkAsUnseenResponseRecipientObjectReference) ImplementsMessageBatchMarkAsUnseenResponseRecipientUnion() {
}

// Source information
type MessageBatchMarkAsUnseenResponseSource struct {
	Typename string `json:"__typename,required"`
	// The workflow categories
	Categories []string `json:"categories,required"`
	// The workflow key
	Key string `json:"key,required"`
	// The source version ID
	VersionID string                                     `json:"version_id,required" format:"uuid"`
	JSON      messageBatchMarkAsUnseenResponseSourceJSON `json:"-"`
}

// messageBatchMarkAsUnseenResponseSourceJSON contains the JSON metadata for the
// struct [MessageBatchMarkAsUnseenResponseSource]
type messageBatchMarkAsUnseenResponseSourceJSON struct {
	Typename    apijson.Field
	Categories  apijson.Field
	Key         apijson.Field
	VersionID   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *MessageBatchMarkAsUnseenResponseSource) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchMarkAsUnseenResponseSourceJSON) RawJSON() string {
	return r.raw
}

// Message delivery status
type MessageBatchMarkAsUnseenResponseStatus string

const (
	MessageBatchMarkAsUnseenResponseStatusQueued            MessageBatchMarkAsUnseenResponseStatus = "queued"
	MessageBatchMarkAsUnseenResponseStatusSent              MessageBatchMarkAsUnseenResponseStatus = "sent"
	MessageBatchMarkAsUnseenResponseStatusDelivered         MessageBatchMarkAsUnseenResponseStatus = "delivered"
	MessageBatchMarkAsUnseenResponseStatusDeliveryAttempted MessageBatchMarkAsUnseenResponseStatus = "delivery_attempted"
	MessageBatchMarkAsUnseenResponseStatusUndelivered       MessageBatchMarkAsUnseenResponseStatus = "undelivered"
	MessageBatchMarkAsUnseenResponseStatusNotSent           MessageBatchMarkAsUnseenResponseStatus = "not_sent"
	MessageBatchMarkAsUnseenResponseStatusBounced           MessageBatchMarkAsUnseenResponseStatus = "bounced"
)

func (r MessageBatchMarkAsUnseenResponseStatus) IsKnown() bool {
	switch r {
	case MessageBatchMarkAsUnseenResponseStatusQueued, MessageBatchMarkAsUnseenResponseStatusSent, MessageBatchMarkAsUnseenResponseStatusDelivered, MessageBatchMarkAsUnseenResponseStatusDeliveryAttempted, MessageBatchMarkAsUnseenResponseStatusUndelivered, MessageBatchMarkAsUnseenResponseStatusNotSent, MessageBatchMarkAsUnseenResponseStatusBounced:
		return true
	}
	return false
}

// Represents a single message that was generated by a workflow for a given
// channel.
type MessageBatchUnarchiveResponse struct {
	// The message ID
	ID       string `json:"id"`
	Typename string `json:"__typename"`
	// A list of actor representations associated with the message (up to 10)
	Actors []MessageBatchUnarchiveResponseActorsUnion `json:"actors"`
	// Timestamp when message was archived
	ArchivedAt time.Time `json:"archived_at,nullable" format:"date-time"`
	// Channel ID associated with the message
	ChannelID string `json:"channel_id" format:"uuid"`
	// Timestamp when message was clicked
	ClickedAt time.Time `json:"clicked_at,nullable" format:"date-time"`
	// Additional message data
	Data map[string]interface{} `json:"data,nullable"`
	// List of engagement statuses
	EngagementStatuses []MessageBatchUnarchiveResponseEngagementStatus `json:"engagement_statuses"`
	// Timestamp of creation
	InsertedAt time.Time `json:"inserted_at" format:"date-time"`
	// Timestamp when message was interacted with
	InteractedAt time.Time `json:"interacted_at,nullable" format:"date-time"`
	// Timestamp when a link in the message was clicked
	LinkClickedAt time.Time `json:"link_clicked_at,nullable" format:"date-time"`
	// Message metadata
	Metadata map[string]interface{} `json:"metadata,nullable"`
	// Timestamp when message was read
	ReadAt time.Time `json:"read_at,nullable" format:"date-time"`
	// A reference to a recipient, either a user identifier (string) or an object
	// reference (id, collection).
	Recipient MessageBatchUnarchiveResponseRecipientUnion `json:"recipient"`
	// Timestamp when message was scheduled for
	ScheduledAt time.Time `json:"scheduled_at,nullable" format:"date-time"`
	// Timestamp when message was seen
	SeenAt time.Time `json:"seen_at,nullable" format:"date-time"`
	// Source information
	Source MessageBatchUnarchiveResponseSource `json:"source"`
	// Message delivery status
	Status MessageBatchUnarchiveResponseStatus `json:"status"`
	// Tenant ID that the message belongs to
	Tenant string `json:"tenant,nullable"`
	// Timestamp of last update
	UpdatedAt time.Time `json:"updated_at" format:"date-time"`
	// Workflow key used to create the message
	//
	// Deprecated: deprecated
	Workflow string                            `json:"workflow,nullable"`
	JSON     messageBatchUnarchiveResponseJSON `json:"-"`
}

// messageBatchUnarchiveResponseJSON contains the JSON metadata for the struct
// [MessageBatchUnarchiveResponse]
type messageBatchUnarchiveResponseJSON struct {
	ID                 apijson.Field
	Typename           apijson.Field
	Actors             apijson.Field
	ArchivedAt         apijson.Field
	ChannelID          apijson.Field
	ClickedAt          apijson.Field
	Data               apijson.Field
	EngagementStatuses apijson.Field
	InsertedAt         apijson.Field
	InteractedAt       apijson.Field
	LinkClickedAt      apijson.Field
	Metadata           apijson.Field
	ReadAt             apijson.Field
	Recipient          apijson.Field
	ScheduledAt        apijson.Field
	SeenAt             apijson.Field
	Source             apijson.Field
	Status             apijson.Field
	Tenant             apijson.Field
	UpdatedAt          apijson.Field
	Workflow           apijson.Field
	raw                string
	ExtraFields        map[string]apijson.Field
}

func (r *MessageBatchUnarchiveResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchUnarchiveResponseJSON) RawJSON() string {
	return r.raw
}

// A reference to a recipient, either a user identifier (string) or an object
// reference (id, collection).
//
// Union satisfied by [shared.UnionString] or
// [MessageBatchUnarchiveResponseActorsObjectReference].
type MessageBatchUnarchiveResponseActorsUnion interface {
	ImplementsMessageBatchUnarchiveResponseActorsUnion()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*MessageBatchUnarchiveResponseActorsUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.String,
			Type:       reflect.TypeOf(shared.UnionString("")),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(MessageBatchUnarchiveResponseActorsObjectReference{}),
		},
	)
}

// An object reference to a recipient
type MessageBatchUnarchiveResponseActorsObjectReference struct {
	// An object identifier
	ID string `json:"id,required"`
	// The collection the object belongs to
	Collection string                                                 `json:"collection,required"`
	JSON       messageBatchUnarchiveResponseActorsObjectReferenceJSON `json:"-"`
}

// messageBatchUnarchiveResponseActorsObjectReferenceJSON contains the JSON
// metadata for the struct [MessageBatchUnarchiveResponseActorsObjectReference]
type messageBatchUnarchiveResponseActorsObjectReferenceJSON struct {
	ID          apijson.Field
	Collection  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *MessageBatchUnarchiveResponseActorsObjectReference) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchUnarchiveResponseActorsObjectReferenceJSON) RawJSON() string {
	return r.raw
}

func (r MessageBatchUnarchiveResponseActorsObjectReference) ImplementsMessageBatchUnarchiveResponseActorsUnion() {
}

type MessageBatchUnarchiveResponseEngagementStatus string

const (
	MessageBatchUnarchiveResponseEngagementStatusSeen        MessageBatchUnarchiveResponseEngagementStatus = "seen"
	MessageBatchUnarchiveResponseEngagementStatusRead        MessageBatchUnarchiveResponseEngagementStatus = "read"
	MessageBatchUnarchiveResponseEngagementStatusInteracted  MessageBatchUnarchiveResponseEngagementStatus = "interacted"
	MessageBatchUnarchiveResponseEngagementStatusLinkClicked MessageBatchUnarchiveResponseEngagementStatus = "link_clicked"
	MessageBatchUnarchiveResponseEngagementStatusArchived    MessageBatchUnarchiveResponseEngagementStatus = "archived"
)

func (r MessageBatchUnarchiveResponseEngagementStatus) IsKnown() bool {
	switch r {
	case MessageBatchUnarchiveResponseEngagementStatusSeen, MessageBatchUnarchiveResponseEngagementStatusRead, MessageBatchUnarchiveResponseEngagementStatusInteracted, MessageBatchUnarchiveResponseEngagementStatusLinkClicked, MessageBatchUnarchiveResponseEngagementStatusArchived:
		return true
	}
	return false
}

// A reference to a recipient, either a user identifier (string) or an object
// reference (id, collection).
//
// Union satisfied by [shared.UnionString] or
// [MessageBatchUnarchiveResponseRecipientObjectReference].
type MessageBatchUnarchiveResponseRecipientUnion interface {
	ImplementsMessageBatchUnarchiveResponseRecipientUnion()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*MessageBatchUnarchiveResponseRecipientUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.String,
			Type:       reflect.TypeOf(shared.UnionString("")),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(MessageBatchUnarchiveResponseRecipientObjectReference{}),
		},
	)
}

// An object reference to a recipient
type MessageBatchUnarchiveResponseRecipientObjectReference struct {
	// An object identifier
	ID string `json:"id,required"`
	// The collection the object belongs to
	Collection string                                                    `json:"collection,required"`
	JSON       messageBatchUnarchiveResponseRecipientObjectReferenceJSON `json:"-"`
}

// messageBatchUnarchiveResponseRecipientObjectReferenceJSON contains the JSON
// metadata for the struct [MessageBatchUnarchiveResponseRecipientObjectReference]
type messageBatchUnarchiveResponseRecipientObjectReferenceJSON struct {
	ID          apijson.Field
	Collection  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *MessageBatchUnarchiveResponseRecipientObjectReference) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchUnarchiveResponseRecipientObjectReferenceJSON) RawJSON() string {
	return r.raw
}

func (r MessageBatchUnarchiveResponseRecipientObjectReference) ImplementsMessageBatchUnarchiveResponseRecipientUnion() {
}

// Source information
type MessageBatchUnarchiveResponseSource struct {
	Typename string `json:"__typename,required"`
	// The workflow categories
	Categories []string `json:"categories,required"`
	// The workflow key
	Key string `json:"key,required"`
	// The source version ID
	VersionID string                                  `json:"version_id,required" format:"uuid"`
	JSON      messageBatchUnarchiveResponseSourceJSON `json:"-"`
}

// messageBatchUnarchiveResponseSourceJSON contains the JSON metadata for the
// struct [MessageBatchUnarchiveResponseSource]
type messageBatchUnarchiveResponseSourceJSON struct {
	Typename    apijson.Field
	Categories  apijson.Field
	Key         apijson.Field
	VersionID   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *MessageBatchUnarchiveResponseSource) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r messageBatchUnarchiveResponseSourceJSON) RawJSON() string {
	return r.raw
}

// Message delivery status
type MessageBatchUnarchiveResponseStatus string

const (
	MessageBatchUnarchiveResponseStatusQueued            MessageBatchUnarchiveResponseStatus = "queued"
	MessageBatchUnarchiveResponseStatusSent              MessageBatchUnarchiveResponseStatus = "sent"
	MessageBatchUnarchiveResponseStatusDelivered         MessageBatchUnarchiveResponseStatus = "delivered"
	MessageBatchUnarchiveResponseStatusDeliveryAttempted MessageBatchUnarchiveResponseStatus = "delivery_attempted"
	MessageBatchUnarchiveResponseStatusUndelivered       MessageBatchUnarchiveResponseStatus = "undelivered"
	MessageBatchUnarchiveResponseStatusNotSent           MessageBatchUnarchiveResponseStatus = "not_sent"
	MessageBatchUnarchiveResponseStatusBounced           MessageBatchUnarchiveResponseStatus = "bounced"
)

func (r MessageBatchUnarchiveResponseStatus) IsKnown() bool {
	switch r {
	case MessageBatchUnarchiveResponseStatusQueued, MessageBatchUnarchiveResponseStatusSent, MessageBatchUnarchiveResponseStatusDelivered, MessageBatchUnarchiveResponseStatusDeliveryAttempted, MessageBatchUnarchiveResponseStatusUndelivered, MessageBatchUnarchiveResponseStatusNotSent, MessageBatchUnarchiveResponseStatusBounced:
		return true
	}
	return false
}

type MessageBatchArchiveParams struct {
	MessageIDs param.Field[[]string] `json:"message_ids,required" format:"uuid"`
}

type MessageBatchGetContentParams struct {
	// The IDs of the messages to fetch contents of
	MessageIDs param.Field[[]string] `query:"message_ids,required"`
}

// URLQuery serializes [MessageBatchGetContentParams]'s query parameters as
// `url.Values`.
func (r MessageBatchGetContentParams) URLQuery() (v url.Values) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatBrackets,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

type MessageBatchMarkAsInteractedParams struct {
	// The message IDs to update
	MessageIDs param.Field[[]string] `json:"message_ids,required"`
	// Metadata about the interaction
	Metadata param.Field[map[string]interface{}] `json:"metadata"`
}

func (r MessageBatchMarkAsInteractedParams) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type MessageBatchMarkAsReadParams struct {
	MessageIDs param.Field[[]string] `json:"message_ids,required" format:"uuid"`
}

type MessageBatchMarkAsSeenParams struct {
	MessageIDs param.Field[[]string] `json:"message_ids,required" format:"uuid"`
}

type MessageBatchMarkAsUnreadParams struct {
	MessageIDs param.Field[[]string] `json:"message_ids,required" format:"uuid"`
}

type MessageBatchMarkAsUnseenParams struct {
	MessageIDs param.Field[[]string] `json:"message_ids,required" format:"uuid"`
}

type MessageBatchUnarchiveParams struct {
	MessageIDs param.Field[[]string] `json:"message_ids,required" format:"uuid"`
}
